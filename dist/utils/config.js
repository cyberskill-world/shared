function r(r,e){if(e==null||e>r.length)e=r.length;for(var n=0,t=new Array(e);n<e;n++)t[n]=r[n];return t}function e(e){if(Array.isArray(e))return r(e)}function n(r){if(typeof Symbol!=="undefined"&&r[Symbol.iterator]!=null||r["@@iterator"]!=null)return Array.from(r)}function t(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function o(r){return e(r)||n(r)||i(r)||t()}function a(r){"@swc/helpers - typeof";return r&&typeof Symbol!=="undefined"&&r.constructor===Symbol?"symbol":typeof r}function i(e,n){if(!e)return;if(typeof e==="string")return r(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor)t=e.constructor.name;if(t==="Map"||t==="Set")return Array.from(t);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return r(e,n)}function u(){for(var r=arguments.length,e=new Array(r),n=0;n<r;n++){e[n]=arguments[n]}var t=function(r,e){return Object.keys(e).forEach(function(n){var i=e[n],u=r[n];Array.isArray(i)?r[n]=o(new Set(o(Array.isArray(u)?u:[]).concat(o(i)))):(typeof i==="undefined"?"undefined":a(i))=="object"&&i!==null&&!Array.isArray(i)?r[n]=t((typeof u==="undefined"?"undefined":a(u))=="object"&&!Array.isArray(u)?u:{},i):r[n]=i}),r};return e.flatMap(function(r){return Array.isArray(r)?r:[r]}).reduce(function(r,e){return t(r,e)},{})}export{u as deepMerge};