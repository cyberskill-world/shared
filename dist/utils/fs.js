function n(n){"@swc/helpers - typeof";return n&&typeof Symbol!=="undefined"&&n.constructor===Symbol?"symbol":typeof n}import*as e from"node:fs";function r(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++){r[o]=arguments[o]}return r.every(function(n){return e.existsSync(n)})}function o(r,o){var t=e.readFileSync(r,"utf-8");if(o===null||o===void 0?void 0:o.asJson)try{var i=JSON.parse(t);if((typeof i==="undefined"?"undefined":n(i))=="object"&&i!==null)return i;throw new Error("Parsed JSON is not an object or array")}catch(n){throw new Error("Failed to parse JSON from file: ".concat(r))}return t}function t(r,o){var t=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};var i=t.isJson,f=i===void 0?!1:i,c=f&&(typeof o==="undefined"?"undefined":n(o))=="object"?JSON.stringify(o,null,4):String(o);e.writeFileSync(r,c,"utf-8")}function i(r,o){var t=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};var i=t.isJson,f=i===void 0?!1:i,c=f&&(typeof o==="undefined"?"undefined":n(o))=="object"?JSON.stringify(o,null,4):String(o);e.appendFileSync(r,c,"utf-8")}function f(){for(var n=arguments.length,o=new Array(n),t=0;t<n;t++){o[t]=arguments[t]}o.forEach(function(n){r(n)&&e.rmSync(n,{recursive:!0,force:!0})})}export{i as appendFileSync,r as existsSync,o as readFileSync,f as rmSync,t as writeFileSync};