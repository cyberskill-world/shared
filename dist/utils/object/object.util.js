function r(r,t){if(t==null||t>r.length)t=r.length;for(var e=0,n=new Array(t);e<t;e++)n[e]=r[e];return n}function t(r){if(Array.isArray(r))return r}function e(t){if(Array.isArray(t))return r(t)}function n(r){if(typeof Symbol!=="undefined"&&r[Symbol.iterator]!=null||r["@@iterator"]!=null)return Array.from(r)}function a(r,t){var e=r==null?null:typeof Symbol!=="undefined"&&r[Symbol.iterator]||r["@@iterator"];if(e==null)return;var n=[];var a=true;var o=false;var i,u;try{for(e=e.call(r);!(a=(i=e.next()).done);a=true){n.push(i.value);if(t&&n.length===t)break}}catch(r){o=true;u=r}finally{try{if(!a&&e["return"]!=null)e["return"]()}finally{if(o)throw u}}return n}function o(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function i(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function u(r,e){return t(r)||a(r,e)||y(r,e)||o()}function l(r){return e(r)||n(r)||y(r)||i()}function f(r){"@swc/helpers - typeof";return r&&typeof Symbol!=="undefined"&&r.constructor===Symbol?"symbol":typeof r}function y(t,e){if(!t)return;if(typeof t==="string")return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);if(n==="Object"&&t.constructor)n=t.constructor.name;if(n==="Map"||n==="Set")return Array.from(n);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(t,e)}var c=Object.defineProperty;var s=function(r,t){return c(r,"name",{value:t,configurable:!0})};function d(r){try{return JSON.parse(r),!0}catch(r){return!1}}s(d,"isJson");function b(r){return(typeof r==="undefined"?"undefined":f(r))=="object"&&r!==null&&!Array.isArray(r)}s(b,"isObject");function v(){for(var r=arguments.length,t=new Array(r),e=0;e<r;e++){t[e]=arguments[e]}var n={};var a=true,o=false,i=undefined,f=true,y=false,c=undefined;try{for(var s=t.flat()[Symbol.iterator](),d;!(f=(d=s.next()).done);f=true){var m=d.value;try{for(var p=Object.entries(m)[Symbol.iterator](),h;!(a=(h=p.next()).done);a=true){var A=u(h.value,2),S=A[0],w=A[1];var g=n[S];if(Array.isArray(w)){var j=Array.isArray(g)?g:[];n[S]=l(new Set(l(j).concat(l(w))));continue}if(b(w)){n[S]=v(b(g)?g:{},w);continue}n[S]=w}}catch(r){o=true;i=r}finally{try{if(!a&&p.return!=null){p.return()}}finally{if(o){throw i}}}}}catch(r){y=true;c=r}finally{try{if(!f&&s.return!=null){s.return()}}finally{if(y){throw c}}}return n}s(v,"deepMerge");export{v as deepMerge,d as isJson,b as isObject};