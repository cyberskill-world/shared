function r(r,e){if(e==null||e>r.length)e=r.length;for(var t=0,n=new Array(e);t<e;t++)n[t]=r[t];return n}function e(r){if(Array.isArray(r))return r}function t(e){if(Array.isArray(e))return r(e)}function n(r){if(typeof Symbol!=="undefined"&&r[Symbol.iterator]!=null||r["@@iterator"]!=null)return Array.from(r)}function o(r,e){var t=r==null?null:typeof Symbol!=="undefined"&&r[Symbol.iterator]||r["@@iterator"];if(t==null)return;var n=[];var o=true;var a=false;var i,u;try{for(t=t.call(r);!(o=(i=t.next()).done);o=true){n.push(i.value);if(e&&n.length===e)break}}catch(r){a=true;u=r}finally{try{if(!o&&t["return"]!=null)t["return"]()}finally{if(a)throw u}}return n}function a(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function i(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function u(r,t){return e(r)||o(r,t)||c(r,t)||a()}function l(r){return t(r)||n(r)||c(r)||i()}function f(r){"@swc/helpers - typeof";return r&&typeof Symbol!=="undefined"&&r.constructor===Symbol?"symbol":typeof r}function c(e,t){if(!e)return;if(typeof e==="string")return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);if(n==="Object"&&e.constructor)n=e.constructor.name;if(n==="Map"||n==="Set")return Array.from(n);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,t)}var y=Object.defineProperty;var s=function(r,e){return y(r,"name",{value:e,configurable:!0})};function b(r){try{return JSON.parse(r),!0}catch(r){return!1}}s(b,"isJson");function d(r){return!!r&&(typeof r==="undefined"?"undefined":f(r))=="object"&&!Array.isArray(r)}s(d,"isPlainObject");function p(){for(var r=arguments.length,e=new Array(r),t=0;t<r;t++){e[t]=arguments[t]}return e.flat().reduce(function(r,e){var t=true,n=false,o=undefined;try{for(var a=Object.entries(e)[Symbol.iterator](),i;!(t=(i=a.next()).done);t=true){var f=u(i.value,2),c=f[0],y=f[1];var s=r[c];Array.isArray(y)?r[c]=Array.from(new Set(l(Array.isArray(s)?s:[]).concat(l(y)))):d(y)?r[c]=p(d(s)?s:{},y):r[c]=y}}catch(r){n=true;o=r}finally{try{if(!t&&a.return!=null){a.return()}}finally{if(n){throw o}}}return r},{})}s(p,"deepMerge");export{p as deepMerge,b as isJson,d as isPlainObject};