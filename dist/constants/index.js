function E(E,e){if(e==null||e>E.length)e=E.length;for(var t=0,o=new Array(e);t<e;t++)o[t]=E[t];return o}function e(e){if(Array.isArray(e))return E(e)}function t(E,e,t){if(e in E){Object.defineProperty(E,e,{value:t,enumerable:true,configurable:true,writable:true})}else{E[e]=t}return E}function o(E){if(typeof Symbol!=="undefined"&&E[Symbol.iterator]!=null||E["@@iterator"]!=null)return Array.from(E)}function n(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function S(E){for(var e=1;e<arguments.length;e++){var o=arguments[e]!=null?arguments[e]:{};var n=Object.keys(o);if(typeof Object.getOwnPropertySymbols==="function"){n=n.concat(Object.getOwnPropertySymbols(o).filter(function(E){return Object.getOwnPropertyDescriptor(o,E).enumerable}))}n.forEach(function(e){t(E,e,o[e])})}return E}function r(E){return e(E)||o(E)||a(E)||n()}function a(e,t){if(!e)return;if(typeof e==="string")return E(e,t);var o=Object.prototype.toString.call(e).slice(8,-1);if(o==="Object"&&e.constructor)o=e.constructor.name;if(o==="Map"||o==="Set")return Array.from(o);if(o==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return E(e,t)}import O from"node:process";import i from"boxen";import _ from"chalk";import{exec as T}from"node:child_process";import I from"node:process";import*as A from"node:util";import c from"node-fetch";import*as s from"node:path";function C(){for(var E=arguments.length,e=new Array(E),t=0;t<E;t++){e[t]=arguments[t]}var o;return(o=s).resolve.apply(o,[P].concat(r(e)))}function N(){for(var E=arguments.length,e=new Array(E),t=0;t<E;t++){e[t]=arguments[t]}var o;return(o=s).join.apply(o,r(e))}import D from"node-persist";var R=24*60*60*1e3;var M=I.env.DEBUG==="true",G=A.promisify(T),L=_.gray,u=_.blue;function l(E){return{raw:!0,cmd:E}}var P=O.env.INIT_CWD||O.cwd(),d="@cyberskill/shared",p=".cyberskill-storage",f="node_modules",m="dist",U="package.json",h="package-lock.json",g="tsconfig.json",y=".gitignore",K=".simple-git-hooks.json",F="pnpm-lock.yaml",v=".git/hooks/",Y=".git/COMMIT_EDITMSG",b=N(P,f,d,m),H="cyberskill",B="eslint",Q="vitest",q="vitest",w="@commitlint/cli",j="commitlint",k="lint-staged",V="lint-staged",x="tsc",W="tsc",J="tsx",X="git",$="pnpm",z="pnpm exec",Z="simple-git-hooks",EE="simple-git-hooks",Ee="@eslint/config-inspector",Et="eslint-config-inspector",Eo="node-modules-inspector",En="node-modules-inspector",ES={CYBERSKILL_DIRECTORY:b,WORKING_DIRECTORY:P,TS_CONFIG:C(g),GIT_IGNORE:C(y),GIT_HOOK:C(v),GIT_COMMIT_MSG:C(Y),SIMPLE_GIT_HOOKS_JSON:C(K),PACKAGE_JSON:C(U),PACKAGE_LOCK_JSON:C(h),PNPM_LOCK_YAML:C(F),NODE_MODULES:C(f),CYBERSKILL:{LINT_STAGED_CONFIG:C("".concat(b,"/configs/lint-staged/base.js")),COMMITLINT_CONFIG:C("".concat(b,"/configs/commitlint/base.js")),UNIT_TEST_CONFIG:C("".concat(b,"/configs/vitest/react/unit.js")),E2E_TEST_CONFIG:C("".concat(b,"/configs/vitest/react/e2e.js"))}};function Er(E){var e=E.isCurrentProject;return S({"pre-commit":V,"commit-msg":j},e&&{"pre-push":l("".concat(X," pull"))})}function Ea(E,e){return l("".concat($," add -D ").concat(E," && ").concat(z," ").concat(e))}function EO(E){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"";return l("".concat(z," ").concat(E," ").concat(e).trim())}var Ei={SIMPLE_GIT_HOOKS:Ea(Z,EE),ESLINT_INSPECT:Ea(Ee,Et),NODE_MODULES_INSPECT:Ea(Eo,En),ESLINT_CHECK:EO(B,ES.WORKING_DIRECTORY),ESLINT_FIX:EO(B,"".concat(ES.WORKING_DIRECTORY," --fix")),TYPESCRIPT_CHECK:Ea(x,"".concat(W," -p ").concat(ES.TS_CONFIG," --noEmit")),CONFIGURE_GIT_HOOK:l("".concat(X," config core.hooksPath ").concat(ES.GIT_HOOK)),BUILD:l("".concat($," run build")),STAGE_BUILD_DIRECTORY:l("".concat(X," add ").concat(m)),PNPM_INSTALL_STANDARD:l("".concat($," install")),PNPM_INSTALL_LEGACY:l("".concat($," install --legacy-peer-deps")),PNPM_INSTALL_FORCE:l("".concat($," install --force")),CYBERSKILL:{TEST_UNIT:Ea(Q,"".concat(q," --config ").concat(ES.CYBERSKILL.UNIT_TEST_CONFIG)),TEST_E2E:Ea(Q,"".concat(q," --config ").concat(ES.CYBERSKILL.E2E_TEST_CONFIG)),COMMIT_LINT:Ea(w,"".concat(j," --edit ").concat(ES.GIT_COMMIT_MSG," --config ").concat(ES.CYBERSKILL.COMMITLINT_CONFIG)),LINT_STAGED:Ea(k,"".concat(V," --config ").concat(ES.CYBERSKILL.LINT_STAGED_CONFIG))}};var E_={GRAPHQL_PARSE_FAILED:{CODE:"GRAPHQL_PARSE_FAILED",MESSAGE:"The GraphQL operation string contains a syntax error."},GRAPHQL_VALIDATION_FAILED:{CODE:"GRAPHQL_VALIDATION_FAILED",MESSAGE:"The GraphQL operation is not valid against the server's schema."},BAD_USER_INPUT:{CODE:"BAD_USER_INPUT",MESSAGE:"The GraphQL operation includes an invalid value for a field argument."},PERSISTED_QUERY_NOT_FOUND:{CODE:"PERSISTED_QUERY_NOT_FOUND",MESSAGE:"A client sent the hash of a query string to execute via automatic persisted queries, but the query was not in the APQ cache."},PERSISTED_QUERY_NOT_SUPPORTED:{CODE:"PERSISTED_QUERY_NOT_SUPPORTED",MESSAGE:"A client sent the hash of a query string to execute via automatic persisted queries, but the server has disabled APQ."},OPERATION_RESOLUTION_FAILURE:{CODE:"OPERATION_RESOLUTION_FAILURE",MESSAGE:"The request was parsed successfully and is valid against the server's schema, but the server couldn't resolve which operation to run. This occurs when a request containing multiple named operations doesn't specify which operation to run (i.e.,operationName), or if the named operation isn't included in the request."},CONTINUE:{CODE:100,MESSAGE:"Continue"},SWITCHING_PROTOCOLS:{CODE:101,MESSAGE:"Switching Protocols"},PROCESSING:{CODE:102,MESSAGE:"Processing"},OK:{CODE:200,MESSAGE:"OK"},CREATED:{CODE:201,MESSAGE:"Created"},ACCEPTED:{CODE:202,MESSAGE:"Accepted"},NON_AUTHORITATIVE_INFORMATION:{CODE:203,MESSAGE:"Non Authoritative Information"},NO_CONTENT:{CODE:204,MESSAGE:"No Content"},RESET_CONTENT:{CODE:205,MESSAGE:"Reset Content"},PARTIAL_CONTENT:{CODE:206,MESSAGE:"Partial Content"},MULTI_STATUS:{CODE:207,MESSAGE:"Multi-Status"},MULTIPLE_CHOICES:{CODE:300,MESSAGE:"Multiple Choices"},MOVED_PERMANENTLY:{CODE:301,MESSAGE:"Moved Permanently"},MOVED_TEMPORARILY:{CODE:302,MESSAGE:"Moved Temporarily"},SEE_OTHER:{CODE:303,MESSAGE:"See Other"},NOT_MODIFIED:{CODE:304,MESSAGE:"Not Modified"},USE_PROXY:{CODE:305,MESSAGE:"Use Proxy"},TEMPORARY_REDIRECT:{CODE:307,MESSAGE:"Temporary Redirect"},PERMANENT_REDIRECT:{CODE:308,MESSAGE:"Permanent Redirect"},BAD_REQUEST:{CODE:400,MESSAGE:"Bad Request"},UNAUTHORIZED:{CODE:401,MESSAGE:"Unauthorized"},PAYMENT_REQUIRED:{CODE:402,MESSAGE:"Payment Required"},FORBIDDEN:{CODE:403,MESSAGE:"Forbidden"},NOT_FOUND:{CODE:404,MESSAGE:"Not Found"},METHOD_NOT_ALLOWED:{CODE:405,MESSAGE:"Method Not Allowed"},NOT_ACCEPTABLE:{CODE:406,MESSAGE:"Not Acceptable"},PROXY_AUTHENTICATION_REQUIRED:{CODE:407,MESSAGE:"Proxy Authentication Required"},REQUEST_TIMEOUT:{CODE:408,MESSAGE:"Request Timeout"},CONFLICT:{CODE:409,MESSAGE:"Conflict"},GONE:{CODE:410,MESSAGE:"Gone"},LENGTH_REQUIRED:{CODE:411,MESSAGE:"Length Required"},PRECONDITION_FAILED:{CODE:412,MESSAGE:"Precondition Failed"},REQUEST_TOO_LONG:{CODE:413,MESSAGE:"Request Entity Too Large"},REQUEST_URI_TOO_LONG:{CODE:414,MESSAGE:"Request-URI Too Long"},UNSUPPORTED_MEDIA_TYPE:{CODE:415,MESSAGE:"Unsupported Media Type"},REQUESTED_RANGE_NOT_SATISFIABLE:{CODE:416,MESSAGE:"Requested Range Not Satisfiable"},EXPECTATION_FAILED:{CODE:417,MESSAGE:"Expectation Failed"},IM_A_TEAPOT:{CODE:418,MESSAGE:"I'm a teapot"},INSUFFICIENT_SPACE_ON_RESOURCE:{CODE:419,MESSAGE:"Insufficient Space on Resource"},METHOD_FAILURE:{CODE:420,MESSAGE:"Method Failure"},MISDIRECTED_REQUEST:{CODE:421,MESSAGE:"Misdirected Request"},UNPROCESSABLE_ENTITY:{CODE:422,MESSAGE:"Unprocessable Entity"},LOCKED:{CODE:423,MESSAGE:"Locked"},FAILED_DEPENDENCY:{CODE:424,MESSAGE:"Failed Dependency"},PRECONDITION_REQUIRED:{CODE:428,MESSAGE:"Precondition Required"},TOO_MANY_REQUESTS:{CODE:429,MESSAGE:"Too Many Requests"},REQUEST_HEADER_FIELDS_TOO_LARGE:{CODE:431,MESSAGE:"Request Header Fields Too Large"},UNAVAILABLE_FOR_LEGAL_REASONS:{CODE:451,MESSAGE:"Unavailable For Legal Reasons"},INTERNAL_SERVER_ERROR:{CODE:500,MESSAGE:"Internal Server Error"},NOT_IMPLEMENTED:{CODE:501,MESSAGE:"Not Implemented"},BAD_GATEWAY:{CODE:502,MESSAGE:"Bad Gateway"},SERVICE_UNAVAILABLE:{CODE:503,MESSAGE:"Service Unavailable"},GATEWAY_TIMEOUT:{CODE:504,MESSAGE:"Gateway Timeout"},HTTP_VERSION_NOT_SUPPORTED:{CODE:505,MESSAGE:"HTTP Version Not Supported"},INSUFFICIENT_STORAGE:{CODE:507,MESSAGE:"Insufficient Storage"},NETWORK_AUTHENTICATION_REQUIRED:{CODE:511,MESSAGE:"Network Authentication Required"}};export{m as BUILD_DIRECTORY,Ei as COMMAND,j as COMMIT_LINT_CLI,w as COMMIT_LINT_PACKAGE_NAME,H as CYBERSKILL_CLI,b as CYBERSKILL_DIRECTORY,d as CYBERSKILL_PACKAGE_NAME,p as CYBERSKILL_STORAGE,B as ESLINT_CLI,Et as ESLINT_INSPECT_CLI,Ee as ESLINT_INSPECT_PACKAGE_NAME,X as GIT_CLI,Y as GIT_COMMIT_EDITMSG,v as GIT_HOOK,y as GIT_IGNORE,Er as HOOK,V as LINT_STAGED_CLI,k as LINT_STAGED_PACKAGE_NAME,f as NODE_MODULES,En as NODE_MODULES_INSPECT_CLI,Eo as NODE_MODULES_INSPECT_PACKAGE_NAME,U as PACKAGE_JSON,h as PACKAGE_LOCK_JSON,ES as PATH,$ as PNPM_CLI,z as PNPM_EXEC_CLI,F as PNPM_LOCK_YAML,E_ as RESPONSE_STATUS,Z as SIMPLE_GIT_HOOKS_PACKAGE_NAME,EE as SIMPLE_GIT_HOOK_CLI,K as SIMPLE_GIT_HOOK_JSON,g as TSCONFIG_JSON,W as TSC_CLI,x as TSC_PACKAGE_NAME,J as TSX_CLI,q as VITEST_CLI,Q as VITEST_PACKAGE_NAME,P as WORKING_DIRECTORY};